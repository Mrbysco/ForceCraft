buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${version}"
group = "com.mrbysco.forcecraft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "forcecraft-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "${mcp_channel}", version: "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg '--mixin.config=forcecraft.mixins.json'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // required for patchouli
            property 'mixin.env.disableRefMap', 'true'

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                forcecraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '--mixin.config=forcecraft.mixins.json'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                forcecraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg '--mixin.config=forcecraft.mixins.json'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'forcecraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                forcecraft {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = 'Patchouli maven'
        url = 'https://maven.blamejared.com'
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

mixin {
    add sourceSets.main, "forcecraft.refmap.json"
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    compileOnly fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:${mc_version}-${patchouli_provider_version}")
    runtimeOnly fg.deobf("xyz.brassgoggledcoders:PatchouliProvider:${mc_version}-${patchouli_provider_version}")

    runtimeOnly fg.deobf("curse.maven:industrial-foregoing-266515:3446262")
    runtimeOnly fg.deobf("curse.maven:titanium-287342:3525770")
    runtimeOnly fg.deobf("curse.maven:pipez-443900:3569511")
    runtimeOnly fg.deobf("curse.maven:CTM-267602:3137659")
    runtimeOnly fg.deobf("curse.maven:StorageDrawers-223852:3402515")

    runtimeOnly fg.deobf("curse.maven:Mantle-74924:3482897")
    runtimeOnly fg.deobf("curse.maven:TConstruct-74072:3482903")

    runtimeOnly fg.deobf("curse.maven:invtweaks-383070:3102237")

    runtimeOnly fg.deobf("curse.maven:mmmmmmmmmmmm-225738:3279930")

    runtimeOnly fg.deobf("curse.maven:cyclic-239286:3853310")
//    implementation fg.deobf("curse.maven:simple-storage-network-268495:3230736")
//    implementation fg.deobf("curse.maven:simple-tomb-399669:3229015")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "forcecraft",
                "Specification-Vendor"    : "Mrbysco",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Mrbysco",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "forcecraft.mixins.json"
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(reobfArtifact) {
                builtBy reobfArtifact
                artifactId = archivesBaseName
                classifier null
            }
        }
    }
    repositories {
        if (System.getenv().SAP_SECRET) {
            maven {
                url "https://maven.saps.dev/releases"
                credentials {
                    username = "mrbysco"
                    password = "${System.getenv().SAP_SECRET}"
                }
            }
        }
    }
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}